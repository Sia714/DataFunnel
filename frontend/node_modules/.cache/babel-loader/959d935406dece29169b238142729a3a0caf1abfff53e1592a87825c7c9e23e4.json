{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\Sayjan Desktop\\\\Projects\\\\DataFunnel\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// main file for rendering charts and tables\nimport { useEffect, useState } from \"react\";\nimport { Container, Grid, Typography, CircularProgress } from \"@mui/material\";\nimport DChart from \"./components/DChart\";\nimport DTable from \"./components/DTable\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [data, setData] = useState(null);\n\n  //fetch the data from the backend API\n  useEffect(() => {\n    fetch(\"http://localhost:3000/api/data\") //url set on the backend\n    .then(res => res.json()).then(setData).catch(err => console.error(\"Error fetching data:\", err));\n  }, []); // [] makes sure data is fetched once when the component loads\n\n  if (!data) return /*#__PURE__*/_jsxDEV(Container, {\n    style: {\n      textAlign: \"center\",\n      marginTop: 50\n    },\n    children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 7\n  }, this); //if data hasn't been fetched yet, show loading text\n\n  //calculate the table data for count\n  const CountTable = data =>\n  //format the raw data into table-ready structure\n\n  data.map((curr, index) => {\n    var _nxt$count;\n    const nxt = data[index + 1];\n    const moved = (_nxt$count = nxt === null || nxt === void 0 ? void 0 : nxt.count) !== null && _nxt$count !== void 0 ? _nxt$count : curr.label === \"Won\" ? curr.count : 0;\n    // Ones who didn't move to the next stage are considered lost\n\n    const lost = curr.count - moved;\n    //win rate is the percentage of last count/ current count\n    const winRate = (data[data.length - 1].count / curr.count * 100).toFixed(0);\n    const diffRate = curr.diffRate;\n    return {\n      stage: curr.label,\n      cameToStage: curr.count,\n      lost,\n      moved,\n      winRate: `${winRate}%`,\n      diffRate\n    };\n  });\n\n  //calculate the table data for acv\n  const AcvTable = data =>\n  //format the raw data into table-ready structure\n\n  data.map((curr, index) => {\n    var _nxt$acv;\n    const nxt = data[index + 1];\n    const moved = (_nxt$acv = nxt === null || nxt === void 0 ? void 0 : nxt.acv) !== null && _nxt$acv !== void 0 ? _nxt$acv : curr.label === \"Won\" ? curr.acv : 0;\n    const lost = curr.acv - moved; //Ones who didn't move to the next stage are considered lost\n\n    //win rate is the percentage of last avc/ current acv\n    const winRate = (data[data.length - 1].acv / curr.acv * 100).toFixed(0);\n    const diffacvRate = curr.diffacvRate;\n    return {\n      stage: curr.label,\n      cameToStage: curr.acv,\n      lost,\n      moved,\n      winRate: `${winRate}%`,\n      diffacvRate\n    };\n  });\n\n  //\n  const tableDataCount = CountTable(data);\n  const tableDataAcv = AcvTable(data);\n\n  //calculate total lost opportunities (excluding 'Won')\n\n  const totalLostCount = tableDataCount.reduce((sum, row) => sum + (row.stage === \"Won\" ? 0 : row.lost), 0);\n  const totalLostAcv = tableDataAcv.reduce((sum, row) => sum + (row.stage === \"Won\" ? 0 : row.lost), 0);\n  return (\n    /*#__PURE__*/\n    //equivalent to div in html\n    _jsxDEV(Container, {\n      style: {\n        padding: 10,\n        marginTop: 30\n      },\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 4,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          size: {\n            xs: 12,\n            sm: 6\n          },\n          children: [\" \", /*#__PURE__*/_jsxDEV(DChart, {\n            data: data,\n            type: \"count\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          size: {\n            xs: 12,\n            sm: 6\n          },\n          children: /*#__PURE__*/_jsxDEV(DChart, {\n            data: data,\n            type: \"acv\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          size: {\n            xs: 12,\n            sm: 6\n          },\n          children: /*#__PURE__*/_jsxDEV(DTable, {\n            data: tableDataCount,\n            totalLost: totalLostCount\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          size: {\n            xs: 12,\n            sm: 6\n          },\n          children: /*#__PURE__*/_jsxDEV(DTable, {\n            data: tableDataAcv,\n            totalLost: totalLostAcv\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 5\n    }, this)\n  );\n}\n_s(App, \"fQZRxy/+nAZ7NLS1X4dVhrlp8Go=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","Container","Grid","Typography","CircularProgress","DChart","DTable","jsxDEV","_jsxDEV","App","_s","data","setData","fetch","then","res","json","catch","err","console","error","style","textAlign","marginTop","children","fileName","_jsxFileName","lineNumber","columnNumber","CountTable","map","curr","index","_nxt$count","nxt","moved","count","label","lost","winRate","length","toFixed","diffRate","stage","cameToStage","AcvTable","_nxt$acv","acv","diffacvRate","tableDataCount","tableDataAcv","totalLostCount","reduce","sum","row","totalLostAcv","padding","container","spacing","size","xs","sm","type","totalLost","_c","$RefreshReg$"],"sources":["C:/Users/HP/Desktop/Sayjan Desktop/Projects/DataFunnel/frontend/src/App.js"],"sourcesContent":["// main file for rendering charts and tables\nimport { useEffect, useState } from \"react\";\nimport { Container, Grid, Typography, CircularProgress } from \"@mui/material\";\nimport DChart from \"./components/DChart\";\nimport DTable from \"./components/DTable\";\n\nfunction App() {\n  const [data, setData] = useState(null);\n\n  //fetch the data from the backend API\n  useEffect(() => {\n    fetch(\"http://localhost:3000/api/data\") //url set on the backend\n      .then((res) => res.json())\n      .then(setData)\n      .catch((err) => console.error(\"Error fetching data:\", err));\n  }, []); // [] makes sure data is fetched once when the component loads\n\n  if (!data)\n    return (\n      <Container style={{ textAlign: \"center\", marginTop: 50 }}>\n        <CircularProgress />\n      </Container>\n    ); //if data hasn't been fetched yet, show loading text\n\n  //calculate the table data for count\n  const CountTable = (data) =>\n    //format the raw data into table-ready structure\n\n    data.map((curr, index) => {\n      const nxt = data[index + 1];\n      const moved = nxt?.count ?? (curr.label === \"Won\" ? curr.count : 0);\n      // Ones who didn't move to the next stage are considered lost\n\n      const lost = curr.count - moved;\n      //win rate is the percentage of last count/ current count\n      const winRate = (\n        (data[data.length - 1].count / curr.count) *\n        100\n      ).toFixed(0);\n      const diffRate = curr.diffRate;\n      return {\n        stage: curr.label,\n        cameToStage: curr.count,\n        lost,\n        moved,\n        winRate: `${winRate}%`,\n        diffRate,\n      };\n    });\n\n  //calculate the table data for acv\n  const AcvTable = (data) =>\n    //format the raw data into table-ready structure\n\n    data.map((curr, index) => {\n      const nxt = data[index + 1];\n      const moved = nxt?.acv ?? (curr.label === \"Won\" ? curr.acv : 0);\n\n      const lost = curr.acv - moved; //Ones who didn't move to the next stage are considered lost\n\n      //win rate is the percentage of last avc/ current acv\n      const winRate = ((data[data.length - 1].acv / curr.acv) * 100).toFixed(0);\n      const diffacvRate = curr.diffacvRate;\n\n      return {\n        stage: curr.label,\n        cameToStage: curr.acv,\n        lost,\n        moved,\n        winRate: `${winRate}%`,\n        diffacvRate,\n      };\n    });\n\n  //\n  const tableDataCount = CountTable(data);\n  const tableDataAcv = AcvTable(data);\n\n  //calculate total lost opportunities (excluding 'Won')\n\n  const totalLostCount = tableDataCount.reduce(\n    (sum, row) => sum + (row.stage === \"Won\" ? 0 : row.lost),\n    0\n  );\n  const totalLostAcv = tableDataAcv.reduce(\n    (sum, row) => sum + (row.stage === \"Won\" ? 0 : row.lost),\n    0\n  );\n\n  return (\n    //equivalent to div in html\n    <Container style={{ padding: 10, marginTop: 30 }}>\n      <Grid container spacing={4}>\n        <Grid size={{ xs: 12, sm: 6 }}>\n          {\" \"}\n          {/* xs,sm used for making it responsive, 12 stands for full width and 6 for half, meaning it would take full width available if the screen size is less than 600 otherwise it will take half the screen. */}\n          <DChart data={data} type=\"count\" />\n          {/* component for funnel chart passed with a type prop tell chart what to visualize (count or acv) */}\n        </Grid>\n        <Grid size={{ xs: 12, sm: 6 }}>\n          <DChart data={data} type=\"acv\" />\n        </Grid>\n        <Grid size={{ xs: 12, sm: 6 }}>\n          <DTable data={tableDataCount} totalLost={totalLostCount} />\n          {/* component for Table passed with multiple arguments which is the table data and total lost count */}\n        </Grid>\n        <Grid size={{ xs: 12, sm: 6 }}>\n          <DTable data={tableDataAcv} totalLost={totalLostAcv} />\n        </Grid>\n      </Grid>\n    </Container>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}